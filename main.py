import telebot
import requests
from telebot import types
from flask import Flask, request
import threading
from werkzeug.serving import make_server
import json 

bot = telebot.TeleBot('6310054769:AAFmc_juovAVh3bDUjU9b9ukxYsdqUOLCCs')
cart = {}
app = Flask(__name__)

@app.route('/', methods=['POST'])
def receive_order():
    data = request.form
    user_id = data.get('user_id')
    order = data.get('order')
    decoded_json = json.loads(order)
    username = data.get('username')
    address = data.get('address')
    phone_number = data.get('phone_number')
    print(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_id} \n–°—Ç—Ä–∞–≤–∏: {decoded_json} \n–ù–∞–∑–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {username} \n–ê–¥—Ä–µ—Å–∞: {address} \n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_number}")
    return 'OK'

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
button_1 = types.KeyboardButton('üç£ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
button_2 = types.KeyboardButton('üì± –ö–æ–Ω—Ç–∞–∫—Ç–∏')
checkout_back = types.KeyboardButton('üì¶ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
button_back = types.KeyboardButton('üö™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
button_cart = types.KeyboardButton('üõí –ö–æ—à–∏–∫')
empty_cart_button = types.KeyboardButton('üóëÔ∏è –û–ø—É—Å—Ç–æ—à–∏—Ç–∏ –∫–æ—à–∏–∫') 
main_markup.add(button_1, button_2, button_back, checkout_back, button_cart, empty_cart_button) 


# –ú–µ–Ω—é –∑—ñ —Å—Ç—Ä–∞–≤–∞–º–∏
order_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
dishes = ['–ö–µ–±–∞–±', '–®–∞—É—Ä–º–∞', '–ë—É—Ä–≥–µ—Ä —Ç–µ–ª—è—Ç–∏–Ω–∞', '–ë—É—Ä–≥–µ—Ä –∫—É—Ä—è—Ç–∏–Ω–∞', '–°–∞–ª–∞—Ç —Ñ—ñ—Ä–º–æ–≤–∏–π', '–¶–µ–∑–∞—Ä –∑ –∫—É—Ä–∫–æ—é', '–°–∞–ª–∞—Ç –≥—Ä–µ—Ü—å–∫–∏–π', '–ë–æ—Ä—â', '–ö—É—Ä—è—á–∏–π –±—É–ª—å–π–æ–Ω', '–ü–∞—Å—Ç–∞ 1', '–ü–∞—Å—Ç–∞ 2']  # –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–≤
dishes_prices = {
    '–ö–µ–±–∞–±': {'price': 250, 'image_path': 'images/kebab.png'},
    '–®–∞—É—Ä–º–∞': {'price': 250, 'image_path': 'images/kebab.png'},
    '–ë—É—Ä–≥–µ—Ä —Ç–µ–ª—è—Ç–∏–Ω–∞': {'price': 360, 'image_path': 'images/kebab.png'},
    '–ë—É—Ä–≥–µ—Ä –∫—É—Ä—è—Ç–∏–Ω–∞': {'price': 340, 'image_path': 'images/kebab.png'},
    '–°–∞–ª–∞—Ç —Ñ—ñ—Ä–º–æ–≤–∏–π': {'price': 190, 'image_path': 'images/kebab.png'},
    '–¶–µ–∑–∞—Ä –∑ –∫—É—Ä–∫–æ—é': {'price': 240, 'image_path': 'images/kebab.png'},
    '–°–∞–ª–∞—Ç –≥—Ä–µ—Ü—å–∫–∏–π': {'price': 220, 'image_path': 'images/kebab.png'},
    '–ë–æ—Ä—â': {'price': 120, 'image_path': 'images/kebab.png'},
    '–ö—É—Ä—è—á–∏–π –±—É–ª—å–π–æ–Ω': {'price': 100, 'image_path': 'images/kebab.png'},
    '–ü–∞—Å—Ç–∞ 1': {'price': 170, 'image_path': 'images/kebab.png'},
    '–ü–∞—Å—Ç–∞ 2': {'price': 185, 'image_path': 'images/kebab.png'},
}

for dish in dishes:
    order_markup.add(types.KeyboardButton(dish))
button_back = types.KeyboardButton('üö™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
order_markup.add(button_back)

# –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ—ó —Å—Ç—Ä–∞–≤–∏
selected_dish = None

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '–î–∞–≤–∞–π –∑—Ä–æ–±–∏–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üòé', reply_markup=main_markup)

@bot.message_handler(func=lambda message: message.text == 'üç£ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
def show_menu(message):
    for dish, details in dishes_prices.items():
        photo_path = details['image_path']
        price = details['price']
        caption = f'{dish}: {price} –≥—Ä–Ω.'
        with open(photo_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo, caption=caption, reply_markup=create_add_to_cart_keyboard(dish))

def create_add_to_cart_keyboard(dish):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞", callback_data=dish))
    return keyboard

@bot.message_handler(func=lambda message: message.text == 'üõí –ö–æ—à–∏–∫')
def view_cart(message):
    if not cart:
        bot.send_message(message.chat.id, '–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.')
    else:
        total_price = sum(dishes_prices[dish]['price'] * quantity for dish, quantity in cart.items())
        cart_items = '\n'.join([f'{dish}: {quantity} —à—Ç. - {dishes_prices[dish]["price"] * quantity} –≥—Ä–Ω.' for dish, quantity in cart.items()])
        bot.send_message(message.chat.id, f'–í–º—ñ—Å—Ç –≤–∞—à–æ–≥–æ –∫–æ—à–∏–∫–∞:\n\n{cart_items}\n\nüí∞ –î–æ —Å–ø–ª–∞—Ç–∏: {total_price} –≥—Ä–Ω.')

@bot.message_handler(func=lambda message: message.text == 'üóëÔ∏è –û–ø—É—Å—Ç–æ—à–∏—Ç–∏ –∫–æ—à–∏–∫')
def empty_cart(message):
    global cart  # –ó—Ä–æ–±–∏—Ç–∏ –∫–æ—à–∏–∫ –≥–ª–æ–±–∞–ª—å–Ω–∏–º, —â–æ–± –º–∞—Ç–∏ –¥–æ –Ω—å–æ–≥–æ –¥–æ—Å—Ç—É–ø
    cart = {}  # –û–ø—É—Å—Ç–æ—à–∏—Ç–∏ –∫–æ—à–∏–∫
    bot.send_message(message.chat.id, 'üóëÔ∏è –ö–æ—à–∏–∫ —É—Å–ø—ñ—à–Ω–æ –æ–ø—É—Å—Ç–æ—à–µ–Ω–æ! ', reply_markup=main_markup)


@bot.callback_query_handler(func=lambda call: call.data in dishes_prices.keys())
def add_to_cart(call):
    selected_dish = call.data
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Å—Ç—Ä–∞–≤–∞ –≤–∂–µ —î —É –∫–æ—à–∏–∫—É
    if selected_dish in cart:
        cart[selected_dish] += 1
    else:
        cart[selected_dish] = 1
    bot.send_message(call.message.chat.id, f'‚úÖ –°—Ç—Ä–∞–≤–∞ –¥–æ–¥–∞–Ω–∞ –¥–æ –∫–æ—à–∏–∫–∞! \n\n–ù–∞–∑–≤–∞: {selected_dish}')

@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == 'üì¶ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è':
        checkout(message)
    else:
        echo(message)

@bot.message_handler(func=lambda message: True)
def echo(message):
    global selected_dish
    if message.text == 'üì± –ö–æ–Ω—Ç–∞–∫—Ç–∏':
        bot.send_message(message.chat.id, "üì±–¢–µ–ª–µ—Ñ–æ–Ω–∏ : +380123456789\n+380123456788\n+380123456777\n‚åõÔ∏è –ü—Ä–∏–π–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å: –ë–µ–∑ –≤–∏—Ö—ñ–¥–Ω–∏—Ö –∑ 22:00 –¥–æ 05:00")
    elif message.text == 'üö™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é':
        bot.send_message(message.chat.id, '–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.', reply_markup=main_markup)

@bot.message_handler(func=lambda message: message.text == 'üì¶ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
def checkout(message):
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—à–∏–∫ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
    if not cart:
        bot.send_message(message.chat.id, '–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.')
        return

    # –ü–æ–ø—Ä–æ—Å–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É:')
    bot.register_next_step_handler(message, ask_address)


def ask_address(message):
    address = message.text
    # bot.send_message(message.chat.id, '–î—è–∫—É—î–º–æ –∑–∞ –∞–¥—Ä–µ—Å—É! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:')
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    reg_button = types.KeyboardButton(text="–ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
    keyboard.add(reg_button)
    bot.send_message(message.chat.id, '–ó–∞–ª–∏—à—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± –∑ –≤–∞–º–∏ –∑–≤\'—è–∑–∞–ª–∏—Å—å', reply_markup=keyboard) 
    bot.register_next_step_handler(message, confirm_order, address)


def confirm_order(message, address):
    phone_number = message.text

    username = message.from_user.username
    if username is None:
        username = message.from_user.first_name  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –Ω—ñ–∫–Ω–µ–π–º –≤—ñ–¥—Å—É—Ç–Ω—ñ–π

    if message.contact:
        phone_number = message.contact.phone_number
        
    send_order_to_server(message.chat.id, message.from_user.username, cart, address, phone_number)
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
    order_text = f'–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n\n'
    order_text += '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n'
    for dish, quantity in cart.items():
        order_text += f'{dish}: {quantity} —à—Ç.\n'
    order_text += f'\n–ê–¥—Ä–µ—Å–∞: {address}\n'
    order_text += f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_number}\n'
    order_text += '\n–û—á—ñ–∫—É–π—Ç–µ –Ω–∞—à–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n'
    order_text += '–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ –Ω–∞—Å!'
    
    bot.send_message(message.chat.id, order_text, reply_markup=main_markup)

def send_order_to_server(user_id, username, order, address, phone_number):
    url = 'http://127.0.0.1:5000'  # URL –≤–∞—à–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    order_json = json.dumps(order)  # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Å–∏–≤—É —É JSON-—Ä—è–¥–æ–∫
    data = {'user_id': user_id, 'username': username, 'order': order_json, 'address': address, 'phone_number': phone_number}
    response = requests.post(url, data=data)
    if response.status_code == 200:
        print('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!')
    else:
        print('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.')

def flask_thread():
    server = make_server('localhost', 5000, app)
    server.serve_forever()

def telegram_thread():
    bot.polling()

if __name__ == '__main__':
    flask_t = threading.Thread(target=flask_thread)
    telegram_t = threading.Thread(target=telegram_thread)

    flask_t.start()
    telegram_t.start()

    flask_t.join()
    telegram_t.join()